h1
heatmapList = vector(mode = 'list', length = length(c("Phosphoproteomics", "Proteomics", "Transcriptomics", "nodeModulation", "EvidenceScore","Phosphoproteomics_SD", "Proteomics_SD", "Transcriptomics_SD", "ImportanceScore")))
temp = temp[,c("index", "Contrast", "EvidenceScore", "ImportanceScore", "Phosphoproteomics", "Proteomics", "Transcriptomics", "Phosphoproteomics_SD", "Proteomics_SD", "Transcriptomics_SD", "nodeModulation")]
for (i in c("Phosphoproteomics", "Proteomics", "Transcriptomics", "nodeModulation")){
valueVar = i
heatmapList[[i]] = Heatmap(as.matrix(scale(reshape2::acast(temp, index ~ Contrast, value.var = valueVar))), cluster_rows = TRUE, cluster_columns = TRUE, column_title = valueVar)
draw(heatmapList[[i]], heatmap_legend_side = "top")
}
for (i in c("EvidenceScore","Phosphoproteomics_SD", "Proteomics_SD", "Transcriptomics_SD", "ImportanceScore")){
valueVar = i
heatmapList[[i]] = Heatmap(t(as.matrix(temp[,i])), cluster_rows = FALSE, cluster_columns = FALSE, column_title = valueVar)
#draw(heatmapList[[i]], heatmap_legend_side = "top")
}
heatmapList = vector(mode = 'list', length = length(c("Phosphoproteomics", "Proteomics", "Transcriptomics", "nodeModulation", "EvidenceScore","Phosphoproteomics_SD", "Proteomics_SD", "Transcriptomics_SD", "ImportanceScore")))
temp = temp[,c("index", "Contrast", "EvidenceScore", "ImportanceScore", "Phosphoproteomics", "Proteomics", "Transcriptomics", "Phosphoproteomics_SD", "Proteomics_SD", "Transcriptomics_SD", "nodeModulation")]
for (i in c("Phosphoproteomics", "Proteomics", "Transcriptomics", "nodeModulation")){
valueVar = i
#heatmapList[[i]] = Heatmap(as.matrix(scale(reshape2::acast(temp, index ~ Contrast, value.var = valueVar))), cluster_rows = TRUE, cluster_columns = TRUE, column_title = valueVar)
heatmapList[[i]] = Heatmap(t(as.matrix(temp[,i])), cluster_rows = FALSE, cluster_columns = FALSE, column_title = valueVar)
draw(heatmapList[[i]], heatmap_legend_side = "top")
}
for (i in c("EvidenceScore","Phosphoproteomics_SD", "Proteomics_SD", "Transcriptomics_SD", "ImportanceScore")){
valueVar = i
heatmapList[[i]] = Heatmap(t(as.matrix(temp[,i])), cluster_rows = FALSE, cluster_columns = FALSE, column_title = valueVar)
#draw(heatmapList[[i]], heatmap_legend_side = "top")
}
ht_list = heatmapList[["EvidenceScore"]] + heatmapList[["Phosphoproteomics_SD"]] + heatmapList[["Proteomics_SD"]] +  heatmapList[["Transcriptomics_SD"]] + heatmapList[["ImportanceScore"]] + heatmapList[["EvidenceScore"]] +
heatmapList[["Phosphoproteomics"]] + heatmapList[["Proteomics"]] +  heatmapList[["Transcriptomics"]] + heatmapList[["nodeModulation"]]
draw(ht_list)
f2 = colorRamp2(seq(-1, 1, length = 3), c("blue", "white", "red"), space = "RGB")
require(circlize)
require(ComplexHeatmap)
f2 = colorRamp2(seq(-1, 1, length = 3), c("blue", "white", "red"), space = "RGB")
heatmapList = vector(mode = 'list', length = length(c("Phosphoproteomics", "Proteomics", "Transcriptomics", "nodeModulation", "EvidenceScore","Phosphoproteomics_SD", "Proteomics_SD", "Transcriptomics_SD", "ImportanceScore")))
temp = temp[,c("index", "Contrast", "EvidenceScore", "ImportanceScore", "Phosphoproteomics", "Proteomics", "Transcriptomics", "Phosphoproteomics_SD", "Proteomics_SD", "Transcriptomics_SD", "nodeModulation")]
for (i in c("Phosphoproteomics", "Proteomics", "Transcriptomics", "nodeModulation", "Phosphoproteomics_SD", "Proteomics_SD", "Transcriptomics_SD", "ImportanceScore")){
valueVar = i
#heatmapList[[i]] = Heatmap(as.matrix(scale(reshape2::acast(temp, index ~ Contrast, value.var = valueVar))), cluster_rows = TRUE, cluster_columns = TRUE, column_title = valueVar)
heatmapList[[i]] = Heatmap(t(scale(as.matrix(temp[,i]))), col=f2, cluster_rows = FALSE, cluster_columns = FALSE, column_title = valueVar)
draw(heatmapList[[i]], heatmap_legend_side = "top")
}
col_letters = c("1" = "pink", "2" = "purple", "3" = "blue")
heatmapList[["EvidenceScore"]] = Heatmap(t(as.matrix(temp[,"EvidenceScore"])), col=col_letters, cluster_rows = FALSE, cluster_columns = FALSE, column_title = "EvidenceScore")
ht_list = heatmapList[["EvidenceScore"]] + heatmapList[["Phosphoproteomics_SD"]] + heatmapList[["Proteomics_SD"]] +  heatmapList[["Transcriptomics_SD"]] + heatmapList[["ImportanceScore"]] + heatmapList[["EvidenceScore"]] +
heatmapList[["Phosphoproteomics"]] + heatmapList[["Proteomics"]] +  heatmapList[["Transcriptomics"]] + heatmapList[["nodeModulation"]]
draw(ht_list)
require(circlize)
require(ComplexHeatmap)
f2 = colorRamp2(seq(-1, 1, length = 3), c("blue", "white", "red"), space = "RGB")
heatmapList = vector(mode = 'list', length = length(c("Phosphoproteomics", "Proteomics", "Transcriptomics", "nodeModulation", "EvidenceScore","Phosphoproteomics_SD", "Proteomics_SD", "Transcriptomics_SD", "ImportanceScore")))
temp = temp[,c("index", "Contrast", "EvidenceScore", "ImportanceScore", "Phosphoproteomics", "Proteomics", "Transcriptomics", "Phosphoproteomics_SD", "Proteomics_SD", "Transcriptomics_SD", "nodeModulation")]
for (i in c("Phosphoproteomics", "Proteomics", "Transcriptomics", "nodeModulation", "Phosphoproteomics_SD", "Proteomics_SD", "Transcriptomics_SD", "ImportanceScore")){
valueVar = i
#heatmapList[[i]] = Heatmap(as.matrix(scale(reshape2::acast(temp, index ~ Contrast, value.var = valueVar))), cluster_rows = TRUE, cluster_columns = TRUE, column_title = valueVar)
heatmapList[[i]] = Heatmap((scale(as.matrix(temp[,i]))), col=f2, cluster_rows = FALSE, cluster_columns = FALSE, column_title = valueVar)
draw(heatmapList[[i]], heatmap_legend_side = "top")
}
col_letters = c("1" = "pink", "2" = "purple", "3" = "blue")
heatmapList[["EvidenceScore"]] = Heatmap((as.matrix(temp[,"EvidenceScore"])), col=col_letters, cluster_rows = FALSE, cluster_columns = FALSE, column_title = "EvidenceScore")
ht_list = heatmapList[["EvidenceScore"]] + heatmapList[["Phosphoproteomics_SD"]] + heatmapList[["Proteomics_SD"]] +  heatmapList[["Transcriptomics_SD"]] + heatmapList[["ImportanceScore"]] + heatmapList[["EvidenceScore"]] +
heatmapList[["Phosphoproteomics"]] + heatmapList[["Proteomics"]] +  heatmapList[["Transcriptomics"]] + heatmapList[["nodeModulation"]]
draw(ht_list, cluster_rows=TRUE)
ht_list = heatmapList[["EvidenceScore"]] %v%  heatmapList[["Phosphoproteomics_SD"]] %v%  heatmapList[["Proteomics_SD"]] %v%   heatmapList[["Transcriptomics_SD"]] %v%  heatmapList[["ImportanceScore"]] %v%  heatmapList[["EvidenceScore"]] %v%
heatmapList[["Phosphoproteomics"]] %v%  heatmapList[["Proteomics"]] %v%   heatmapList[["Transcriptomics"]] %v%  heatmapList[["nodeModulation"]]
draw(ht_list, cluster_rows=TRUE)
ht_list = heatmapList[["EvidenceScore"]] + heatmapList[["Phosphoproteomics_SD"]] + heatmapList[["Proteomics_SD"]] +  heatmapList[["Transcriptomics_SD"]] + heatmapList[["ImportanceScore"]] + heatmapList[["EvidenceScore"]] +
heatmapList[["Phosphoproteomics"]] + heatmapList[["Proteomics"]] +  heatmapList[["Transcriptomics"]] + heatmapList[["nodeModulation"]]
draw(ht_list, cluster_rows=TRUE)
ht_list = heatmapList[["EvidenceScore"]] + heatmapList[["Phosphoproteomics_SD"]] + heatmapList[["Proteomics_SD"]] +  heatmapList[["Transcriptomics_SD"]] + heatmapList[["ImportanceScore"]] + heatmapList[["EvidenceScore"]] +
heatmapList[["Phosphoproteomics"]] + heatmapList[["Proteomics"]] +  heatmapList[["Transcriptomics"]] + heatmapList[["nodeModulation"]]
draw(ht_list, cluster_rows=TRUE)
ht_list = heatmapList[["EvidenceScore"]] + heatmapList[["Phosphoproteomics_SD"]] + heatmapList[["Proteomics_SD"]] +  heatmapList[["Transcriptomics_SD"]] + heatmapList[["ImportanceScore"]] + heatmapList[["EvidenceScore"]] +
heatmapList[["Phosphoproteomics"]] + heatmapList[["Proteomics"]] +  heatmapList[["Transcriptomics"]] + heatmapList[["nodeModulation"]]
draw(ht_list, cluster_rows=TRUE, column_km = 2)
ht_list = heatmapList[["EvidenceScore"]] + heatmapList[["Phosphoproteomics_SD"]] + heatmapList[["Proteomics_SD"]] +  heatmapList[["Transcriptomics_SD"]] + heatmapList[["ImportanceScore"]] + heatmapList[["EvidenceScore"]] +
heatmapList[["Phosphoproteomics"]] + heatmapList[["Proteomics"]] +  heatmapList[["Transcriptomics"]] + heatmapList[["nodeModulation"]]
draw(ht_list, cluster_rows=TRUE, row_km = 2)
ht_list = heatmapList[["EvidenceScore"]] + heatmapList[["Phosphoproteomics_SD"]] + heatmapList[["Proteomics_SD"]] +  heatmapList[["Transcriptomics_SD"]] + heatmapList[["ImportanceScore"]] + heatmapList[["EvidenceScore"]] +
heatmapList[["Phosphoproteomics"]] + heatmapList[["Proteomics"]] +  heatmapList[["Transcriptomics"]] + heatmapList[["nodeModulation"]]
draw(ht_list, cluster_rows=TRUE, row_km = 2, cluster_cols=TRUE)
ht_list = heatmapList[["EvidenceScore"]] + heatmapList[["Phosphoproteomics_SD"]] + heatmapList[["Proteomics_SD"]] +  heatmapList[["Transcriptomics_SD"]] + heatmapList[["ImportanceScore"]] + heatmapList[["EvidenceScore"]] +
heatmapList[["Phosphoproteomics"]] + heatmapList[["Proteomics"]] +  heatmapList[["Transcriptomics"]] + heatmapList[["nodeModulation"]]
draw(ht_list, cluster_rows=TRUE, row_km = 2, cluster_columns=TRUE)
ht_list = heatmapList[["EvidenceScore"]] + heatmapList[["Phosphoproteomics_SD"]] + heatmapList[["Proteomics_SD"]] +  heatmapList[["Transcriptomics_SD"]] + heatmapList[["ImportanceScore"]] + heatmapList[["EvidenceScore"]] +
heatmapList[["Phosphoproteomics"]] + heatmapList[["Proteomics"]] +  heatmapList[["Transcriptomics"]] + heatmapList[["nodeModulation"]]
draw(ht_list, cluster_rows=TRUE, row_km = 2)
ht_list = + heatmapList[["nodeModulation"]] + heatmapList[["Phosphoproteomics_SD"]] + heatmapList[["Proteomics_SD"]] +  heatmapList[["Transcriptomics_SD"]] + heatmapList[["ImportanceScore"]] + heatmapList[["EvidenceScore"]]
ht_list = heatmapList[["nodeModulation"]] + heatmapList[["Phosphoproteomics_SD"]] + heatmapList[["Proteomics_SD"]] +  heatmapList[["Transcriptomics_SD"]] + heatmapList[["ImportanceScore"]] + heatmapList[["EvidenceScore"]]
heatmapList[["Phosphoproteomics"]] + heatmapList[["Proteomics"]] +  heatmapList[["Transcriptomics"]]  + heatmapList[["EvidenceScore"]]
draw(ht_list, cluster_rows=TRUE, row_km = 2)
ht_list = heatmapList[["nodeModulation"]] + heatmapList[["Phosphoproteomics_SD"]] + heatmapList[["Proteomics_SD"]] +  heatmapList[["Transcriptomics_SD"]] + heatmapList[["ImportanceScore"]] + heatmapList[["EvidenceScore"]]
heatmapList[["Phosphoproteomics"]] + heatmapList[["Proteomics"]] +  heatmapList[["Transcriptomics"]]  + heatmapList[["EvidenceScore"]]
draw(ht_list, cluster_rows=TRUE, row_km = 3)
ht_list = heatmapList[["nodeModulation"]] + heatmapList[["Phosphoproteomics_SD"]] + heatmapList[["Proteomics_SD"]] +  heatmapList[["Transcriptomics_SD"]] + heatmapList[["ImportanceScore"]] + heatmapList[["EvidenceScore"]]
heatmapList[["Phosphoproteomics"]] + heatmapList[["Proteomics"]] +  heatmapList[["Transcriptomics"]]  + heatmapList[["EvidenceScore"]]
draw(ht_list, cluster_rows=TRUE, row_km = 5)
ht_list = heatmapList[["nodeModulation"]] + heatmapList[["Phosphoproteomics_SD"]] + heatmapList[["Proteomics_SD"]] +  heatmapList[["Transcriptomics_SD"]] + heatmapList[["ImportanceScore"]] + heatmapList[["EvidenceScore"]]
heatmapList[["Phosphoproteomics"]] + heatmapList[["Proteomics"]] +  heatmapList[["Transcriptomics"]]  + heatmapList[["EvidenceScore"]]
draw(ht_list, cluster_rows=TRUE, row_km = 10)
ht_list = heatmapList[["nodeModulation"]] + heatmapList[["Phosphoproteomics_SD"]] + heatmapList[["Proteomics_SD"]] +  heatmapList[["Transcriptomics_SD"]] + heatmapList[["ImportanceScore"]] + heatmapList[["EvidenceScore"]]
heatmapList[["Phosphoproteomics"]] + heatmapList[["Proteomics"]] +  heatmapList[["Transcriptomics"]]  + heatmapList[["EvidenceScore"]]
draw(ht_list, cluster_rows=TRUE, row_km = 4)
install.packages("GGally")
head(temp)
library("ggplot2")                     # Load ggplot2 package
library("GGally")                      # Load GGally package
require("ggplot2")                     # Load ggplot2 package
require("GGally")                      # Load GGally package
ggpairs(temp)
require("ggplot2")                     # Load ggplot2 package
require("GGally")                      # Load GGally package
ggpairs(temp[,c("Phosphoproteomics", "Proteomics", "Transcriptomics", "nodeModulation", "EvidenceScore","Phosphoproteomics_SD", "Proteomics_SD", "Transcriptomics_SD", "ImportanceScore")])
require("ggplot2")                     # Load ggplot2 package
require("GGally")                      # Load GGally package
ggpairs(temp[,c("nodeModulation", "ImportanceScore","Phosphoproteomics", "Proteomics", "Transcriptomics",  "EvidenceScore","Phosphoproteomics_SD", "Proteomics_SD", "Transcriptomics_SD")])
?ggpairs
require("ggplot2")                     # Load ggplot2 package
require("GGally")                      # Load GGally package
ggpairs(temp[,c("nodeModulation", "ImportanceScore","Phosphoproteomics", "Proteomics", "Transcriptomics",  "EvidenceScore","Phosphoproteomics_SD", "Proteomics_SD", "Transcriptomics_SD")]) + theme_pubr()
require("ggplot2")                     # Load ggplot2 package
require("GGally")                      # Load GGally package
require(ggpubr)
ggpairs(temp[,c("nodeModulation", "ImportanceScore","Phosphoproteomics", "Proteomics", "Transcriptomics",  "EvidenceScore","Phosphoproteomics_SD", "Proteomics_SD", "Transcriptomics_SD")]) + theme_pubr()
p1 = ggpairs(temp[,c("nodeModulation", "ImportanceScore","Phosphoproteomics", "Proteomics", "Transcriptomics",  "EvidenceScore","Phosphoproteomics_SD", "Proteomics_SD", "Transcriptomics_SD")]) + theme_pubr()
require("ggplot2")                     # Load ggplot2 package
require("GGally")                      # Load GGally package
require(ggpubr)
p1 = ggpairs(temp[,c("nodeModulation", "ImportanceScore","Phosphoproteomics", "Proteomics", "Transcriptomics",  "EvidenceScore","Phosphoproteomics_SD", "Proteomics_SD", "Transcriptomics_SD")]) + theme_pubr()
ggsave("nodeModComponents.svg", p1, dpi = 1200, width = 12, height=12)
ggsave("nodeModComponents.svg", p1, dpi = 1200, width = 14, height=14)
p1 = ggpairs(temp[,c("nodeModulation", "ImportanceScore","Phosphoproteomics", "Proteomics", "Transcriptomics",  "EvidenceScore","Phosphoproteomics_SD", "Proteomics_SD", "Transcriptomics_SD")]) + theme_bw()
ggsave("nodeModComponents.svg", p1, dpi = 1200, width = 14, height=14)
metaNet_scores = read.csv("nodeModulation.csv", row.names = 1)
head(metaNet_scores)
temp2 = aggregate(nodeModulation ~ index, metaNet_scores, sd)
colnames(temp2) <- c("index", "nodeModulation_sd")
temp2 <- temp2[order(temp2$nodeModulation, decreasing = TRUE),]
head(temp2)
highSD_genes = temp2$index[1:100]
temp = t(reshape2::acast(metaNet_scores, index ~ Contrast, value.var = 'nodeModulation'))
temp = temp[,temp2$index[1:100]]
knitr::kable(head(temp))
require(ComplexHeatmap)
require(circlize)
f2 = colorRamp2(seq(-1, 1, length = 3), c("blue", "white", "red"), space = "RGB")
h1 <- Heatmap(scale(temp),
col = f2,
rect_gp = gpar(col = "lightgrey", lwd = 2),
column_title_rot = 0,
row_title_rot = 0,
column_title = paste0('Genes in network'),
column_title_side = "bottom",
border = TRUE,
heatmap_legend_param = list(
direction = "horizontal",
title = "Scaled Node Modulation Score",
title_position = "topcenter",
legend_width = unit(5, 'in'),
border = 'black'
),
column_names_gp = gpar(fontsize = 10),
row_names_gp = gpar(fontsize = 10))
draw(h1, heatmap_legend_side = "top")
IS = read.csv("ImportanceScores.csv", row.names = 1)
RA = read.csv("RelativeAbundance.csv")
ES = read.csv("EvidenceScore.csv")
NM = read.csv("nodeModulation.csv", row.names = 1)
SD = read.csv("StandardDeviation.csv")
require(knitr)
kable(head(IS))
kable(head(RA))
kable(head(ES))
kable(head(NM))
pathway = 'metaNetwork'
contrast = '19% O2, CyA-_vs_1% O2, CyA+'
genesInPathway = as.vector(IS$index[IS$Pathway %in% c(pathway)])
require(plyr)
RA$index = RA$Gene
ES$index = ES$Gene
SD$index = SD$Gene
colnames(SD) = c("Gene", "Phosphoproteomics_SD", "Proteomics_SD", "Transcriptomics_SD", "index")
temp = plyr::join(IS, RA, by = c('index'), type = 'inner')
temp = plyr::join(temp, ES, by = c('index'), type = 'inner')
temp = plyr::join(temp, SD, by = c('index'), type = 'inner')
temp = plyr::join(temp, NM, by = c('index', 'Contrast'), type = 'inner')
temp = temp[temp$Pathway == pathway, c("index", "Contrast", "nodeModulation", "EvidenceScore", "ImportanceScore", "Phosphoproteomics", "Proteomics", "Transcriptomics", "Phosphoproteomics_SD", "Proteomics_SD", "Transcriptomics_SD")]
dim(temp)
colnames(temp)
head(temp)
temp = temp[temp$index %in% highSD_genes,]
temp = temp[temp$Contrast==contrast,]
require(circlize)
require(ComplexHeatmap)
f2 = colorRamp2(seq(-1, 1, length = 3), c("blue", "white", "red"), space = "RGB")
heatmapList = vector(mode = 'list', length = length(c("Phosphoproteomics", "Proteomics", "Transcriptomics", "nodeModulation", "EvidenceScore","Phosphoproteomics_SD", "Proteomics_SD", "Transcriptomics_SD", "ImportanceScore")))
temp = temp[,c("index", "Contrast", "EvidenceScore", "ImportanceScore", "Phosphoproteomics", "Proteomics", "Transcriptomics", "Phosphoproteomics_SD", "Proteomics_SD", "Transcriptomics_SD", "nodeModulation")]
for (i in c("Phosphoproteomics", "Proteomics", "Transcriptomics", "nodeModulation", "Phosphoproteomics_SD", "Proteomics_SD", "Transcriptomics_SD", "ImportanceScore")){
valueVar = i
#heatmapList[[i]] = Heatmap(as.matrix(scale(reshape2::acast(temp, index ~ Contrast, value.var = valueVar))), cluster_rows = TRUE, cluster_columns = TRUE, column_title = valueVar)
heatmapList[[i]] = Heatmap((scale(as.matrix(temp[,i]))), col=f2, cluster_rows = FALSE, cluster_columns = FALSE, column_title = valueVar)
draw(heatmapList[[i]], heatmap_legend_side = "top")
}
col_letters = c("1" = "pink", "2" = "purple", "3" = "blue")
heatmapList[["EvidenceScore"]] = Heatmap(t(as.matrix(temp[,"EvidenceScore"])), col=col_letters, cluster_rows = FALSE, cluster_columns = FALSE, column_title = "EvidenceScore")
ht_list = heatmapList[["nodeModulation"]] + heatmapList[["Phosphoproteomics_SD"]] + heatmapList[["Proteomics_SD"]] +  heatmapList[["Transcriptomics_SD"]] + heatmapList[["ImportanceScore"]] + heatmapList[["EvidenceScore"]]
#ht_list = heatmapList[["nodeModulation"]] + heatmapList[["Phosphoproteomics_SD"]] + heatmapList[["Proteomics_SD"]] +  heatmapList[["Transcriptomics_SD"]] + heatmapList[["ImportanceScore"]] + heatmapList[["EvidenceScore"]]
#heatmapList[["Phosphoproteomics"]] + heatmapList[["Proteomics"]] +  heatmapList[["Transcriptomics"]]  + heatmapList[["EvidenceScore"]]
#draw(ht_list, cluster_rows=TRUE, row_km = 4)
require("ggplot2")                     # Load ggplot2 package
require("GGally")                      # Load GGally package
require(ggpubr)
p1 = ggpairs(temp[,c("nodeModulation", "ImportanceScore","Phosphoproteomics", "Proteomics", "Transcriptomics",  "EvidenceScore","Phosphoproteomics_SD", "Proteomics_SD", "Transcriptomics_SD")]) + theme_bw()
ggsave("nodeModComponents.svg", p1, dpi = 1200, width = 14, height=14)
head(temp)
?ggpairs
require("ggplot2")                     # Load ggplot2 package
require("GGally")                      # Load GGally package
require(ggpubr)
temp2 = temp[,c("nodeModulation", "ImportanceScore","Phosphoproteomics", "Proteomics", "Transcriptomics",  "EvidenceScore","Phosphoproteomics_SD", "Proteomics_SD", "Transcriptomics_SD")]
colnames(temp2) = c("Node Modulation\nScore", "Importance\nScore","Phosphoproteomics\nlog2 FC", "Proteomics\nlog2 FC", "Transcriptomics\nlog2 FC",  "Evidence\nScore","Phosphoproteomics\nSD", "Proteomics\nSD", "Transcriptomics\nSD")
p1 = ggpairs(temp2) + theme_bw()
ggsave("nodeModComponents.svg", p1, dpi = 1200, width = 14, height=14)
head(temp)
require(ComplexHeatmap)
require(circlize)
temp$Contrast = gsub("_vs_", "\\nvs\\n", temp$Contrast)
f2 = colorRamp2(seq(-1, 1, length = 3), c("blue", "white", "red"), space = "RGB")
h1 <- Heatmap(scale(temp),
col = f2,
rect_gp = gpar(col = "lightgrey", lwd = 2),
column_title_rot = 0,
row_title_rot = 0,
column_title = paste0('Genes in network'),
column_title_side = "bottom",
border = TRUE,
heatmap_legend_param = list(
direction = "horizontal",
title = "Scaled Node Modulation Score",
title_position = "topcenter",
legend_width = unit(5, 'in'),
border = 'black'
),
column_names_gp = gpar(fontsize = 10),
row_names_gp = gpar(fontsize = 10))
metaNet_scores = read.csv("nodeModulation.csv", row.names = 1)
metaNet_scores$Contrast = gsub("_vs_", "\\nvs\\n", metaNet_scores$Contrast)
head(metaNet_scores)
temp2 = aggregate(nodeModulation ~ index, metaNet_scores, sd)
colnames(temp2) <- c("index", "nodeModulation_sd")
temp2 <- temp2[order(temp2$nodeModulation, decreasing = TRUE),]
head(temp2)
highSD_genes = temp2$index[1:100]
temp = t(reshape2::acast(metaNet_scores, index ~ Contrast, value.var = 'nodeModulation'))
temp = temp[,temp2$index[1:100]]
knitr::kable(head(temp))
require(ComplexHeatmap)
require(circlize)
f2 = colorRamp2(seq(-1, 1, length = 3), c("blue", "white", "red"), space = "RGB")
h1 <- Heatmap(scale(temp),
col = f2,
rect_gp = gpar(col = "lightgrey", lwd = 2),
column_title_rot = 0,
row_title_rot = 0,
column_title = paste0('Genes in network'),
column_title_side = "bottom",
border = TRUE,
heatmap_legend_param = list(
direction = "horizontal",
title = "Scaled Node Modulation Score",
title_position = "topcenter",
legend_width = unit(5, 'in'),
border = 'black'
),
column_names_gp = gpar(fontsize = 10),
row_names_gp = gpar(fontsize = 10))
draw(h1, heatmap_legend_side = "top")
IS = read.csv("ImportanceScores.csv", row.names = 1)
RA = read.csv("RelativeAbundance.csv")
ES = read.csv("EvidenceScore.csv")
NM = read.csv("nodeModulation.csv", row.names = 1)
SD = read.csv("StandardDeviation.csv")
require(knitr)
kable(head(IS))
kable(head(RA))
kable(head(ES))
kable(head(NM))
pathway = 'metaNetwork'
contrast = '19% O2, CyA-_vs_1% O2, CyA+'
genesInPathway = as.vector(IS$index[IS$Pathway %in% c(pathway)])
require(plyr)
RA$index = RA$Gene
ES$index = ES$Gene
SD$index = SD$Gene
colnames(SD) = c("Gene", "Phosphoproteomics_SD", "Proteomics_SD", "Transcriptomics_SD", "index")
temp = plyr::join(IS, RA, by = c('index'), type = 'inner')
temp = plyr::join(temp, ES, by = c('index'), type = 'inner')
temp = plyr::join(temp, SD, by = c('index'), type = 'inner')
temp = plyr::join(temp, NM, by = c('index', 'Contrast'), type = 'inner')
temp = temp[temp$Pathway == pathway, c("index", "Contrast", "nodeModulation", "EvidenceScore", "ImportanceScore", "Phosphoproteomics", "Proteomics", "Transcriptomics", "Phosphoproteomics_SD", "Proteomics_SD", "Transcriptomics_SD")]
dim(temp)
colnames(temp)
head(temp)
temp = temp[temp$index %in% highSD_genes,]
temp = temp[temp$Contrast==contrast,]
require(circlize)
require(ComplexHeatmap)
f2 = colorRamp2(seq(-1, 1, length = 3), c("blue", "white", "red"), space = "RGB")
heatmapList = vector(mode = 'list', length = length(c("Phosphoproteomics", "Proteomics", "Transcriptomics", "nodeModulation", "EvidenceScore","Phosphoproteomics_SD", "Proteomics_SD", "Transcriptomics_SD", "ImportanceScore")))
temp = temp[,c("index", "Contrast", "EvidenceScore", "ImportanceScore", "Phosphoproteomics", "Proteomics", "Transcriptomics", "Phosphoproteomics_SD", "Proteomics_SD", "Transcriptomics_SD", "nodeModulation")]
for (i in c("Phosphoproteomics", "Proteomics", "Transcriptomics", "nodeModulation", "Phosphoproteomics_SD", "Proteomics_SD", "Transcriptomics_SD", "ImportanceScore")){
valueVar = i
#heatmapList[[i]] = Heatmap(as.matrix(scale(reshape2::acast(temp, index ~ Contrast, value.var = valueVar))), cluster_rows = TRUE, cluster_columns = TRUE, column_title = valueVar)
heatmapList[[i]] = Heatmap((scale(as.matrix(temp[,i]))), col=f2, cluster_rows = FALSE, cluster_columns = FALSE, column_title = valueVar)
draw(heatmapList[[i]], heatmap_legend_side = "top")
}
col_letters = c("1" = "pink", "2" = "purple", "3" = "blue")
heatmapList[["EvidenceScore"]] = Heatmap(t(as.matrix(temp[,"EvidenceScore"])), col=col_letters, cluster_rows = FALSE, cluster_columns = FALSE, column_title = "EvidenceScore")
#ht_list = heatmapList[["nodeModulation"]] + heatmapList[["Phosphoproteomics_SD"]] + heatmapList[["Proteomics_SD"]] +  heatmapList[["Transcriptomics_SD"]] + heatmapList[["ImportanceScore"]] + heatmapList[["EvidenceScore"]]
#heatmapList[["Phosphoproteomics"]] + heatmapList[["Proteomics"]] +  heatmapList[["Transcriptomics"]]  + heatmapList[["EvidenceScore"]]
#draw(ht_list, cluster_rows=TRUE, row_km = 4)
require("ggplot2")                     # Load ggplot2 package
require("GGally")                      # Load GGally package
require(ggpubr)
temp2 = temp[,c("nodeModulation", "ImportanceScore","Phosphoproteomics", "Proteomics", "Transcriptomics",  "EvidenceScore","Phosphoproteomics_SD", "Proteomics_SD", "Transcriptomics_SD")]
colnames(temp2) = c("Node Modulation\nScore", "Importance\nScore","Phosphoproteomics\nlog2 FC", "Proteomics\nlog2 FC", "Transcriptomics\nlog2 FC",  "Evidence\nScore","Phosphoproteomics\nSD", "Proteomics\nSD", "Transcriptomics\nSD")
p1 = ggpairs(temp2) + theme_bw()
ggsave("nodeModComponents.svg", p1, dpi = 1200, width = 14, height=14)
?ggpairs
head(temp2)
require("ggplot2")                     # Load ggplot2 package
require("GGally")                      # Load GGally package
require(ggpubr)
temp2 = temp[,c("nodeModulation", "ImportanceScore","Phosphoproteomics", "Proteomics", "Transcriptomics",  "EvidenceScore","Phosphoproteomics_SD", "Proteomics_SD", "Transcriptomics_SD")]
colnames(temp2) = c("Node Modulation\nScore", "Importance\nScore","Phosphoproteomics\nlog2 FC", "Proteomics\nlog2 FC", "Transcriptomics\nlog2 FC",  "Evidence\nScore","Phosphoproteomics\nSD", "Proteomics\nSD", "Transcriptomics\nSD")
p1 = ggpairs(temp2, columns = '"Node Modulation\nScore') + theme_bw()
require("ggplot2")                     # Load ggplot2 package
require("GGally")                      # Load GGally package
require(ggpubr)
temp2 = temp[,c("nodeModulation", "ImportanceScore","Phosphoproteomics", "Proteomics", "Transcriptomics",  "EvidenceScore","Phosphoproteomics_SD", "Proteomics_SD", "Transcriptomics_SD")]
colnames(temp2) = c("Node Modulation\nScore", "Importance\nScore","Phosphoproteomics\nlog2 FC", "Proteomics\nlog2 FC", "Transcriptomics\nlog2 FC",  "Evidence\nScore","Phosphoproteomics\nSD", "Proteomics\nSD", "Transcriptomics\nSD")
p1 = ggpairs(temp2, columns = '"Node Modulation\nScore') + theme_bw()
require("ggplot2")                     # Load ggplot2 package
require("GGally")                      # Load GGally package
require(ggpubr)
temp2 = temp[,c("nodeModulation", "ImportanceScore","Phosphoproteomics", "Proteomics", "Transcriptomics",  "EvidenceScore","Phosphoproteomics_SD", "Proteomics_SD", "Transcriptomics_SD")]
colnames(temp2) = c("Node Modulation\nScore", "Importance\nScore","Phosphoproteomics\nlog2 FC", "Proteomics\nlog2 FC", "Transcriptomics\nlog2 FC",  "Evidence\nScore","Phosphoproteomics\nSD", "Proteomics\nSD", "Transcriptomics\nSD")
p1 = ggpairs(temp2, columns = 'Node Modulation\nScore') + theme_bw()
ggsave("nodeModComponents.svg", p1, dpi = 1200, width = 14, height=14)
metaNet_scores = read.csv("nodeModulation.csv", row.names = 1)
metaNet_scores$Contrast = gsub("_vs_", "\\nvs\\n", metaNet_scores$Contrast)
head(metaNet_scores)
temp2 = aggregate(nodeModulation ~ index, metaNet_scores, sd)
colnames(temp2) <- c("index", "nodeModulation_sd")
temp2 <- temp2[order(temp2$nodeModulation, decreasing = TRUE),]
head(temp2)
highSD_genes = temp2$index[1:100]
temp = t(reshape2::acast(metaNet_scores, index ~ Contrast, value.var = 'nodeModulation'))
temp = temp[,temp2$index[1:100]]
knitr::kable(head(temp))
require(ComplexHeatmap)
require(circlize)
f2 = colorRamp2(seq(-1, 1, length = 3), c("blue", "white", "red"), space = "RGB")
h1 <- Heatmap(scale(temp),
col = f2,
rect_gp = gpar(col = "lightgrey", lwd = 2),
column_title_rot = 0,
row_title_rot = 0,
column_title = paste0('Genes in network'),
column_title_side = "bottom",
border = TRUE,
heatmap_legend_param = list(
direction = "horizontal",
title = "Scaled Node Modulation Score",
title_position = "topcenter",
legend_width = unit(5, 'in'),
border = 'black'
),
column_names_gp = gpar(fontsize = 10),
row_names_gp = gpar(fontsize = 10))
draw(h1, heatmap_legend_side = "top")
IS = read.csv("ImportanceScores.csv", row.names = 1)
RA = read.csv("RelativeAbundance.csv")
ES = read.csv("EvidenceScore.csv")
NM = read.csv("nodeModulation.csv", row.names = 1)
SD = read.csv("StandardDeviation.csv")
require(knitr)
kable(head(IS))
kable(head(RA))
kable(head(ES))
kable(head(NM))
pathway = 'metaNetwork'
contrast = '19% O2, CyA-_vs_1% O2, CyA+'
genesInPathway = as.vector(IS$index[IS$Pathway %in% c(pathway)])
require(plyr)
RA$index = RA$Gene
ES$index = ES$Gene
SD$index = SD$Gene
colnames(SD) = c("Gene", "Phosphoproteomics_SD", "Proteomics_SD", "Transcriptomics_SD", "index")
temp = plyr::join(IS, RA, by = c('index'), type = 'inner')
temp = plyr::join(temp, ES, by = c('index'), type = 'inner')
temp = plyr::join(temp, SD, by = c('index'), type = 'inner')
temp = plyr::join(temp, NM, by = c('index', 'Contrast'), type = 'inner')
temp = temp[temp$Pathway == pathway, c("index", "Contrast", "nodeModulation", "EvidenceScore", "ImportanceScore", "Phosphoproteomics", "Proteomics", "Transcriptomics", "Phosphoproteomics_SD", "Proteomics_SD", "Transcriptomics_SD")]
dim(temp)
colnames(temp)
head(temp)
temp = temp[temp$index %in% highSD_genes,]
temp = temp[temp$Contrast==contrast,]
require(circlize)
require(ComplexHeatmap)
f2 = colorRamp2(seq(-1, 1, length = 3), c("blue", "white", "red"), space = "RGB")
heatmapList = vector(mode = 'list', length = length(c("Phosphoproteomics", "Proteomics", "Transcriptomics", "nodeModulation", "EvidenceScore","Phosphoproteomics_SD", "Proteomics_SD", "Transcriptomics_SD", "ImportanceScore")))
temp2 = temp[,c("index", "Contrast", "EvidenceScore", "ImportanceScore", "Phosphoproteomics", "Proteomics", "Transcriptomics", "Phosphoproteomics_SD", "Proteomics_SD", "Transcriptomics_SD", "nodeModulation")]
for (i in c("Phosphoproteomics", "Proteomics", "Transcriptomics", "nodeModulation", "Phosphoproteomics_SD", "Proteomics_SD", "Transcriptomics_SD", "ImportanceScore")){
valueVar = i
#heatmapList[[i]] = Heatmap(as.matrix(scale(reshape2::acast(temp, index ~ Contrast, value.var = valueVar))), cluster_rows = TRUE, cluster_columns = TRUE, column_title = valueVar)
heatmapList[[i]] = Heatmap((scale(as.matrix(temp[,i]))), col=f2, cluster_rows = FALSE, cluster_columns = FALSE, column_title = valueVar)
draw(heatmapList[[i]], heatmap_legend_side = "top")
}
col_letters = c("1" = "pink", "2" = "purple", "3" = "blue")
heatmapList[["EvidenceScore"]] = Heatmap(t(as.matrix(temp[,"EvidenceScore"])), col=col_letters, cluster_rows = FALSE, cluster_columns = FALSE, column_title = "EvidenceScore")
#ht_list = heatmapList[["nodeModulation"]] + heatmapList[["Phosphoproteomics_SD"]] + heatmapList[["Proteomics_SD"]] +  heatmapList[["Transcriptomics_SD"]] + heatmapList[["ImportanceScore"]] + heatmapList[["EvidenceScore"]]
#heatmapList[["Phosphoproteomics"]] + heatmapList[["Proteomics"]] +  heatmapList[["Transcriptomics"]]  + heatmapList[["EvidenceScore"]]
#draw(ht_list, cluster_rows=TRUE, row_km = 4)
require("ggplot2")                     # Load ggplot2 package
require("GGally")                      # Load GGally package
require(ggpubr)
temp2 = temp[,c("nodeModulation", "ImportanceScore","Phosphoproteomics", "Proteomics", "Transcriptomics",  "EvidenceScore","Phosphoproteomics_SD", "Proteomics_SD", "Transcriptomics_SD")]
colnames(temp2) = c("Node Modulation\nScore", "Importance\nScore","Phosphoproteomics\nlog2 FC", "Proteomics\nlog2 FC", "Transcriptomics\nlog2 FC",  "Evidence\nScore","Phosphoproteomics\nSD", "Proteomics\nSD", "Transcriptomics\nSD")
write.csv(temp2, "processedNodeModulation_from_R.py")
p1 = ggpairs(temp2, columns = 'Node Modulation\nScore') + theme_bw()
ggsave("nodeModComponents.svg", p1, dpi = 1200, width = 14, height=14)
getwd()
require("ggplot2")                     # Load ggplot2 package
require("GGally")                      # Load GGally package
require(ggpubr)
temp2 = temp[,c("nodeModulation", "ImportanceScore","Phosphoproteomics", "Proteomics", "Transcriptomics",  "EvidenceScore","Phosphoproteomics_SD", "Proteomics_SD", "Transcriptomics_SD")]
colnames(temp2) = c("Node Modulation\nScore", "Importance\nScore","Phosphoproteomics\nlog2 FC", "Proteomics\nlog2 FC", "Transcriptomics\nlog2 FC",  "Evidence\nScore","Phosphoproteomics\nSD", "Proteomics\nSD", "Transcriptomics\nSD")
write.csv(temp2, "processedNodeModulation_from_R.py")
p1 = ggpairs(temp2, columns = 'Node Modulation\nScore') + theme_bw()
ggsave("nodeModComponents.svg", p1, dpi = 1200, width = 14, height=14)
write.csv(temp2, "processedNodeModulation_from_R.csv")
data('tips')
data(tips)
ggally_colbar(tips, mapping = aes(x = smoker, y = sex))
??tips
require(reshape2)
data(tips)
ggally_colbar(tips, mapping = aes(x = smoker, y = sex))
data("Titanic")
ggduo(
data = as.data.frame(Titanic),
mapping = aes(weight = Freq),
columnsX = "Survived",
columnsY = c("Sex", "Class", "Age"),
types = list(discrete = "rowbar"),
legend = 1
)
data(flea)
ggscatmat(flea, columns = 2:4)
?ggscatmat
require("ggplot2")                     # Load ggplot2 package
require("GGally")                      # Load GGally package
require(ggpubr)
temp2 = temp[,c("nodeModulation", "ImportanceScore","Phosphoproteomics", "Proteomics", "Transcriptomics",  "EvidenceScore","Phosphoproteomics_SD", "Proteomics_SD", "Transcriptomics_SD")]
colnames(temp2) = c("Node Modulation\nScore", "Importance\nScore","Phosphoproteomics\nlog2 FC", "Proteomics\nlog2 FC", "Transcriptomics\nlog2 FC",  "Evidence\nScore","Phosphoproteomics\nSD", "Proteomics\nSD", "Transcriptomics\nSD")
write.csv(temp2, "processedNodeModulation_from_R.csv")
p1 = ggpairs(temp2) + theme_bw()
ggsave("nodeModComponents.svg", p1, dpi = 1200, width = 14, height=14)
p1 = ggscatmat(temp2) + theme_bw()
ggsave("nodeModComponents.svg", p1, dpi = 1200, width = 14, height=14)
head(melt(temp2))
head(melt(temp2, measure.vars = "Node Modulation\nScore"))
head(melt(temp2, id.vars = "Node Modulation\nScore"))
ggplot(data = melt(temp2, id.vars = "Node Modulation\nScore"))
ggplot(data = melt(temp2, id.vars = "Node Modulation\nScore")) + geom_point(aes('"Node Modulation\nScore", "value"))
ggplot(data = melt(temp2, id.vars = "Node Modulation\nScore")) + geom_point(aes("Node Modulation\nScore", "value"))
)
)))
)
0)
"Node Modulation\nScore""Node Modulation\nScore"
am;fnd v: %>% ``
``
))
)
""
"
""
ggplot(data = melt(temp2, id.vars = "Node Modulation\nScore")) + geom_point(aes("Node Modulation\nScore", "value"))
ggplot(data = melt(temp2, id.vars = "Node Modulation\nScore")) + geom_point(aes(`Node Modulation\nScore`, `value`))
ggplot(data = melt(temp2, id.vars = "Node Modulation\nScore")) + geom_point(aes(`Node Modulation\nScore`, `value`)) + facet_wrap(variable)
head(melt(temp2, id.vars = "Node Modulation\nScore"))
ggplot(data = melt(temp2, id.vars = "Node Modulation\nScore")) + geom_point(aes(`Node Modulation\nScore`, `value`)) + facet_wrap(`variable`)
?facet_wrap
ggplot(data = melt(temp2, id.vars = "Node Modulation\nScore")) + geom_point(aes(`Node Modulation\nScore`, `value`)) + facet_wrap(vars(`variable`))
ggplot(data = melt(temp2, id.vars = "Node Modulation\nScore")) + geom_point(aes(`value`. `Node Modulation\nScore`)) + facet_wrap(vars(`variable`))
ggplot(data = melt(temp2, id.vars = "Node Modulation\nScore")) + geom_point(aes(`value`, `Node Modulation\nScore`)) + facet_wrap(vars(`variable`))
ggplot(data = melt(temp2, id.vars = "Node Modulation\nScore")) + geom_point(aes(`value`, `Node Modulation\nScore`)) + facet_wrap(vars(`variable`), nrow=1, scales= 'free')
ggplot(data = melt(temp2, id.vars = "Node Modulation\nScore")) + geom_point(aes(`value`, `Node Modulation\nScore`)) + facet_wrap(vars(`variable`), nrow=3, scales= 'free')
ggplot(data = melt(temp2, id.vars = "Node Modulation\nScore")) + geom_point(aes(`value`, `Node Modulation\nScore`)) + facet_wrap(vars(`variable`), nrow=2, scales= 'free')
ggplot(data = melt(temp2, id.vars = "Node Modulation\nScore")) + geom_point(aes(`value`, `Node Modulation\nScore`)) + facet_wrap(vars(`variable`), nrow=2, scales= 'free') + theme_pubr()
ggplot(data = melt(temp2, id.vars = "Node Modulation\nScore")) + geom_point(aes(`value`, `Node Modulation\nScore`)) + facet_wrap(vars(`variable`), nrow=2, scales= 'free') + theme_pubr() + geom_smooth(method = "lm", se = FALSE)
ggplot(data = melt(temp2, id.vars = "Node Modulation\nScore")) + geom_point(aes(`value`, `Node Modulation\nScore`)) + theme_pubr()+   geom_smooth(method = "lm", se = FALSE) #+ facet_wrap(vars(`variable`), nrow=2, scales= 'free')
ggplot(data = melt(temp2, id.vars = "Node Modulation\nScore")) + geom_point(aes(`value`, `Node Modulation\nScore`)) + facet_wrap(vars(`variable`), nrow=2, scales= 'free') + theme_pubr()
install.packages('ggmisc')
install.packages('ggpmisc')
install.packages("ggpmisc")
require(ggpmisc)
ggplot(data = melt(temp2, id.vars = "Node Modulation\nScore")) + geom_point(aes(`value`, `Node Modulation\nScore`)) + facet_wrap(vars(`variable`), nrow=2, scales= 'free') + theme_pubr() + stat_correlation()
require(ggpmisc)
install.packages("ggpmisc")
