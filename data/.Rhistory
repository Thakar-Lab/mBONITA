"1% O2, CyA+ vs 1% O2, CyA-"='#E41A1C', "19% O2, CyA- vs 1% O2, CyA+"='#377EB8',
"1% O2, CyA- vs 19% O2, CyA-"='#4DAF4A'
)) + scale_color_manual(values=c(
"1% O2, CyA+ vs 1% O2, CyA-"='#E41A1C', "19% O2, CyA- vs 1% O2, CyA+"='#377EB8',
"1% O2, CyA- vs 19% O2, CyA-"='#4DAF4A'
))
) ,
width_ratio=0.3,
set_sizes=(),
require(ComplexUpset)
PAlist2 <- lapply(PAlist, function(x){return(x[x$Method %in% c("Concatenated", "Combined", "mBONITA"), intersect(colnames(x), c('Contrast', 'Pathway',"Method", 'negativelog10FDR'))])}) #lapply(PAlist, function(x){return(x[x$Pathway %in% gmt$Pathway & x$Method %in% c("Concatenated", "Combined"), intersect(colnames(x), c('Contrast', 'Pathway',"Method", 'negativelog10FDR'))])})
PAlist2$Pathway <- unlist(lapply(PAlist2$Pathway, function(x){if(x %in% gmt$Pathway){return(paste0(x, "**"))}}))
PAlist2 <- Filter(function(x) dim(x)[1] > 0, PAlist2)
for (i in names(PAlist2)){
PAlist2[[i]]$Algorithm <- i
}
PAlist2 <- do.call(rbind,PAlist2)
rownames(PAlist2) <- 1:nrow(PAlist2)
PAlist2$Method <- 'Combined'
PAlist2 <- reshape2::acast(PAlist2, Pathway + Contrast ~ Algorithm , value.var = 'negativelog10FDR')
PAlist2[is.na(PAlist2)] <- 0
PAlist2 <- as.data.frame(apply(PAlist2, c(1,2), FUN=function(x){if(x>1.303){return(TRUE)}else{return(FALSE)}}))
PAlist2$Pathway <- gsub("\\_.*", "", rownames(PAlist2))
PAlist2$Contrast <- gsub(".*\\_", "", rownames(PAlist2))
#PAlist2 <- reshape2::melt(PAlist2)
#colnames(PAlist2) <- c("Pathway", "Algorithm", "Contrast", "negativelog10FDR")
head(PAlist2)
ComplexUpset::upset(
PAlist2,
colnames(PAlist2)[1:5],
base_annotations=list(
'Intersection Size'=intersection_size(mode = 'intersect' , bar_number_threshold=0.45, text_colors = c(on_background = "black", on_bar = "black"), size=0, mapping=aes(fill=Contrast), position = 'stack' #, #text_mapping = aes(colour=Contrast),
#text = list(position=position_stack())
) + ylim(0, 150) + scale_fill_manual(values=c(
"1% O2, CyA+ vs 1% O2, CyA-"='#E41A1C', "19% O2, CyA- vs 1% O2, CyA+"='#377EB8',
"1% O2, CyA- vs 19% O2, CyA-"='#4DAF4A'
)) + scale_color_manual(values=c(
"1% O2, CyA+ vs 1% O2, CyA-"='#E41A1C', "19% O2, CyA- vs 1% O2, CyA+"='#377EB8',
"1% O2, CyA- vs 19% O2, CyA-"='#4DAF4A'
))
) ,
width_ratio=0.3,
set_sizes=FALSE,
# moves legends over the set sizes
guides='over'
)
require(ComplexUpset)
PAlist2 <-
lapply(PAlist, function(x) {
return(x[x$Method %in% c("Concatenated", "Combined", "mBONITA"), intersect(colnames(x),
c('Contrast', 'Pathway', "Method", 'negativelog10FDR'))])
}) #lapply(PAlist, function(x){return(x[x$Pathway %in% gmt$Pathway & x$Method %in% c("Concatenated", "Combined"), intersect(colnames(x), c('Contrast', 'Pathway',"Method", 'negativelog10FDR'))])})
PAlist2$Pathway <-
unlist(lapply(PAlist2$Pathway, function(x) {
if (x %in% gmt$Pathway) {
return(paste0(x, "**"))
}
}))
PAlist2 <- Filter(function(x)
dim(x)[1] > 0, PAlist2)
for (i in names(PAlist2)) {
PAlist2[[i]]$Algorithm <- i
}
PAlist2 <- do.call(rbind, PAlist2)
rownames(PAlist2) <- 1:nrow(PAlist2)
PAlist2$Method <- 'Combined'
PAlist2 <-
reshape2::acast(PAlist2, Pathway + Contrast ~ Algorithm , value.var = 'negativelog10FDR')
PAlist2[is.na(PAlist2)] <- 0
PAlist2 <-
as.data.frame(apply(
PAlist2,
c(1, 2),
FUN = function(x) {
if (x > 1.303) {
return(TRUE)
} else{
return(FALSE)
}
))
PAlist2$Pathway <- gsub("\\_.*", "", rownames(PAlist2))
PAlist2$Contrast <- gsub(".*\\_", "", rownames(PAlist2))
#PAlist2 <- reshape2::melt(PAlist2)
#colnames(PAlist2) <- c("Pathway", "Algorithm", "Contrast", "negativelog10FDR")
head(PAlist2)
ComplexUpset::upset(
PAlist2,
colnames(PAlist2)[1:5],
base_annotations = list(
'Intersection Size' = intersection_size(
mode = 'intersect' ,
bar_number_threshold = 0.45,
text_colors = c(on_background = "black", on_bar = "black"),
size = 0,
mapping = aes(fill = Contrast),
position = 'stack' #, #text_mapping = aes(colour=Contrast),
#text = list(position=position_stack())
) + ylim(0, 150) + scale_fill_manual(
values = c(
"1% O2, CyA+ vs 1% O2, CyA-" = '#E41A1C',
"19% O2, CyA- vs 1% O2, CyA+" = '#377EB8',
"1% O2, CyA- vs 19% O2, CyA-" = '#4DAF4A'
)
) ,
width_ratio = 0.3,
set_sizes = FALSE,
# moves legends over the set sizes
#guides = 'over'
)
require(ComplexUpset)
PAlist2 <-
lapply(PAlist, function(x) {
return(x[x$Method %in% c("Concatenated", "Combined", "mBONITA"), intersect(colnames(x),
c('Contrast', 'Pathway', "Method", 'negativelog10FDR'))])
}) #lapply(PAlist, function(x){return(x[x$Pathway %in% gmt$Pathway & x$Method %in% c("Concatenated", "Combined"), intersect(colnames(x), c('Contrast', 'Pathway',"Method", 'negativelog10FDR'))])})
PAlist2$Pathway <-
unlist(lapply(PAlist2$Pathway, function(x) {
if (x %in% gmt$Pathway) {
return(paste0(x, "**"))
}
}))
PAlist2 <- Filter(function(x)
dim(x)[1] > 0, PAlist2)
for (i in names(PAlist2)) {
PAlist2[[i]]$Algorithm <- i
}
PAlist2 <- do.call(rbind, PAlist2)
rownames(PAlist2) <- 1:nrow(PAlist2)
PAlist2$Method <- 'Combined'
PAlist2 <-
reshape2::acast(PAlist2, Pathway + Contrast ~ Algorithm , value.var = 'negativelog10FDR')
PAlist2[is.na(PAlist2)] <- 0
PAlist2 <-
as.data.frame(apply(
PAlist2,
c(1, 2),
FUN = function(x) {
if (x > 1.303) {
return(TRUE)
} else{
return(FALSE)
}
))
PAlist2$Pathway <- gsub("\\_.*", "", rownames(PAlist2))
PAlist2$Contrast <- gsub(".*\\_", "", rownames(PAlist2))
#PAlist2 <- reshape2::melt(PAlist2)
#colnames(PAlist2) <- c("Pathway", "Algorithm", "Contrast", "negativelog10FDR")
head(PAlist2)
ComplexUpset::upset(
PAlist2,
colnames(PAlist2)[1:5],
base_annotations = list(
'Intersection Size' = intersection_size(
mode = 'intersect' ,
bar_number_threshold = 0.45,
text_colors = c(on_background = "black", on_bar = "black"),
size = 0,
mapping = aes(fill = Contrast),
position = 'stack' #, #text_mapping = aes(colour=Contrast),
#text = list(position=position_stack())
) + ylim(0, 150) + scale_fill_manual(
values = c(
"1% O2, CyA+ vs 1% O2, CyA-" = '#E41A1C',
"19% O2, CyA- vs 1% O2, CyA+" = '#377EB8',
"1% O2, CyA- vs 19% O2, CyA-" = '#4DAF4A'
)
) ,
width_ratio = 0.3,
set_sizes = FALSE,
# moves legends over the set sizes
guide = 'over'
)
require(UpSetR)
require(ggplot2)
require(ggsci)
require(ggpubr)
require(reshape2)
require(metap)
reshapePvals <- function(mBonita_PA) {
allPA <-
reshape2::melt(
mBonita_PA,
id.vars = c("Pathway", "Method"),
measure.vars =  c(
"X1O2PlusCyA - X1O2NoCyA",
"X1O2NoCyA - X19O2NoCyA",
"X19O2NoCyA - X1O2PlusCyA"
)
colnames(allPA) <-
c("Pathway", "Method", "Contrast", "negativelog10pvalue")
allPA$pvalue <- 10 ^ (-1 * allPA$negativelog10pvalue)
allPA$FDR <- p.adjust(allPA$pvalue, method = "BH")
allPA$negativelog10FDR <- (-1)*log10(allPA$FDR)
temp <- allPA$pvalue < 0.05
allPA <- allPA[temp,]
return(allPA)
}
#concat_PA <- read.csv("pvalues_concatenated_20220816.csv", row.names = 1, col.names= c("Pathway", "Code", "Nodes", "X1O2PlusCyA - X1O2NoCyA", "X1O2NoCyA - X19O2NoCyA", "X19O2NoCyA - X1O2PlusCyA"), check.names = FALSE)
#concat_PA$Method <- "Concatenated"
#concat_PA <- reshapePvals(concat_PA)
prot_PA <- read.csv("pvalues_proteomics_20220816.csv", row.names = 1, col.names= c("Pathway", "Code", "Nodes", "X1O2PlusCyA - X1O2NoCyA", "X1O2NoCyA - X19O2NoCyA", "X19O2NoCyA - X1O2PlusCyA"), check.names = FALSE)
prot_PA$Method <- "Proteomics"
prot_PA <- reshapePvals(prot_PA)
trans_PA <- read.csv("pvalues_transcriptomics_20221007.csv", row.names = 1, col.names= c("Pathway", "Code", "Nodes", "X1O2PlusCyA - X1O2NoCyA", "X1O2NoCyA - X19O2NoCyA", "X19O2NoCyA - X1O2PlusCyA"), check.names = FALSE) #read.csv("pvalues_transcriptomics_20220816.csv", row.names = 1, col.names= c("Pathway", "Code", "Nodes", "X1O2PlusCyA - X1O2NoCyA", "X1O2NoCyA - X19O2NoCyA", "X19O2NoCyA - X1O2PlusCyA"), check.names = FALSE)
trans_PA$Method <- "Transcriptomics"
trans_PA <- reshapePvals(trans_PA)
phosph_PA <- read.csv("pvalues_phosphoproteomics_20220816.csv", row.names = 1, col.names= c("Pathway", "Code", "Nodes", "X1O2PlusCyA - X1O2NoCyA", "X1O2NoCyA - X19O2NoCyA", "X19O2NoCyA - X1O2PlusCyA"), check.names = FALSE)
phosph_PA$Method <- "Phosphoproteomics"
phosph_PA <- reshapePvals(phosph_PA)
Bonita_PA <- rbind(prot_PA, trans_PA, phosph_PA)
temp <- as.data.frame(reshape2::acast(data = Bonita_PA, Contrast ~ Pathway , value.var = 'FDR', fun.aggregate = function(x){return(metap::sumz(x)$p)}))
temp <- as.data.frame(reshape2::melt(as.matrix(temp)))
temp$Method <- "Combined"
colnames(temp) <- c("Contrast", "Pathway", "FDR", "Method")
temp$negativelog10FDR <- (-1)*log10(temp$FDR)
hist(temp$FDR)
concat_PA <- temp
Bonita_PA <- na.omit(rbind(prot_PA[,colnames(temp)], trans_PA[,colnames(temp)], phosph_PA[,colnames(temp)], temp))
write.csv(Bonita_PA, "Bonita_allResults_20221007.csv")
temp <- Bonita_PA$FDR < 0.05
Bonita_PA <- Bonita_PA[temp,]
head(Bonita_PA)
ggplot(trans_PA) + geom_point(aes(x=negativelog10FDR, y=Pathway, color=Contrast)) + facet_wrap(facets = 'Method', drop=TRUE) + theme_bw()
ggsave(filename = "Bonita_trans_allResults.svg", width = 12, height = 24, units = 'in')
ggsave(filename = 'Bonita_trans_allResults.png', width = 12, height =24, units = 'in')
ggplot(prot_PA) + geom_point(aes(x=negativelog10FDR, y=Pathway, color=Contrast)) + facet_wrap(facets = 'Method', drop=TRUE) + theme_bw()
ggsave(filename = "Bonita_prot_allResults.svg", width = 12, height = 24, units = 'in')
ggsave(filename = 'Bonita_prot_allResults.png', width = 12, height =24, units = 'in')
ggplot(phosph_PA) + geom_point(aes(x=negativelog10FDR, y=Pathway, color=Contrast)) + facet_wrap(facets = 'Method', drop=TRUE) + theme_bw()
ggsave(filename = "Bonita_phosph_allResults.svg", width = 12, height = 24, units = 'in')
ggsave(filename = 'Bonita_phosph_allResults.png', width = 12, height =24, units = 'in')
ggplot(concat_PA) + geom_point(aes(x=negativelog10FDR, y=Pathway, color=Contrast)) + facet_wrap(facets = 'Method', drop=TRUE) + theme_bw()
ggsave(filename = "Bonita_combined_pvals_allResults.svg", width = 12, height = 24, units = 'in')
ggsave(filename = 'Bonita_combined_pvals_allResults.png', width = 12, height =24, units = 'in')
localData = read.csv('local1Data.csv')
localData = localData[,2:ncol(localData)]
head(localData)
colnames(localData)
localData$equivs[1:5]
localData$ruleLengths[1:5]
localData$nodeList[1:5]
localData$andNodeList[1:5]
localData$equivs[1:5]
?grep
grep("\[",localData$equivs[1:5])
grep("\\[",localData$equivs[1:5])
localData$equivs[1:5]
stringr::str_count("\\[",localData$equivs[1:5])
stringr::str_count("\\[",as.vector(localData$equivs[1:5]))
stringr::str_count("[",as.vector(localData$equivs[1:5]))
stringr::str_count(pattern = "[",string = as.vector(localData$equivs[1:5]))
stringr::str_count(pattern = "\\[",string = as.vector(localData$equivs[1:5]))
getIndegree = function(x){
return(stringr::str_count(pattern = "\\[",string = x) - 1)
}
localData$indegree = unlist(lapply(as.vector(localData$equivs), getIndegree))
localData$indegree[1:5]
?geom_histogram
??ggpairs
?acast
require(reshape2)
head(localData)
temp = dcast(localData, methodName + nodeList ~ ruleLengths + indegree)
head(temp)
?melt
temp = dcast(localData, ruleLengths + indegree ~ methodName + nodeList)
temp = dcast(localData, value.var = c('indegree', 'ruleLengths'), id.var = c('nodeList', 'methodName'))
temp = melt(localData, value.var = c('indegree', 'ruleLengths'), id.var = c('nodeList', 'methodName'))
head(temp)
temp = melt(localData, value.vars = c('indegree', 'ruleLengths'), id.vars = c('nodeList', 'methodName'))
head(temp)
?reshape
View(temp)
localData = read.csv('local1Data.csv')
localData = localData[,2:ncol(localData)]
head(localData)
colnames(localData)
getIndegree = function(x){
return(stringr::str_count(pattern = "\\[",string = x) - 1)
}
localData$indegree = unlist(lapply(as.vector(localData$equivs), getIndegree))
require(ggplot2)
require(GGally)
require(reshape2)
ggpairs(data = localData[localData$indegree>=3,], columns = 'ruleLengths', aes(color = methodName, shape = methodName)) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16)) + scale_color_brewer(palette = 'Dark2') + scale_fill_brewer(palette = 'Dark2')
ggpairs(data = localData[localData$indegree>=3,], columns = 'ruleLengths', aes(color = methodName, shape = methodName), showStrips = FALSE) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16)) + scale_color_brewer(palette = 'Dark2') + scale_fill_brewer(palette = 'Dark2')
ggplot(data = localData[localData$indegree>=3,]) + geom_density(aes(ruleLengths)) + facet_wrap(vars(methodName))
ggplot(data = localData[localData$indegree>=3,]) + geom_hist(aes(ruleLengths)) + facet_wrap(vars(methodName))
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths)) + facet_wrap(vars(methodName))
?geom_histogram
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths)) + facet_wrap(vars(methodName), scales = "free") + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16)) + scale_color_brewer(palette = 'Dark2') + scale_fill_brewer(palette = 'Dark2') + xlab("Count")
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins=10) + facet_wrap(vars(methodName), scales = "free") + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16)) + scale_color_brewer(palette = 'Dark2') + scale_fill_brewer(palette = 'Dark2') + xlab("Count")
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins=10) + facet_wrap(vars(methodName), scales = "free") + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16)) + scale_color_brewer(palette = 'Dark2') + scale_fill_brewer(palette = 'Dark2') + xlab("Count") + scale_x_continuous(name = "Size of ERS", breaks = c(1,7,15,63,127))
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins=5) + facet_wrap(vars(methodName), scales = "free") + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16)) + scale_color_brewer(palette = 'Dark2') + scale_fill_brewer(palette = 'Dark2') + xlab("Count") + scale_x_continuous(name = "Size of ERS", breaks = c(1,7,15,63,127))
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins=5) + facet_wrap(vars(methodName), scales = "free") + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16)) + scale_color_brewer(palette = 'Dark2') + scale_fill_brewer(palette = 'Dark2') + xlab("Count") + scale_x_continuous(name = "Size of ERS", breaks = c(1,15,63,127))
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins=5) + facet_wrap(vars(methodName), scales = "free") + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16)) + scale_color_brewer(palette = 'Dark2') + scale_fill_brewer(palette = 'Dark2') + xlab("Count") + scale_x_continuous(name = "Size of ERS")
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins=5) + facet_wrap(vars(methodName), scales = "free") + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16)) + scale_color_brewer(palette = 'Dark2') + scale_fill_brewer(palette = 'Dark2') + xlab("Count") + scale_x_continuous(name = "Size of ERS", breaks = c(1,63,127))
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins=3) + facet_wrap(vars(methodName), scales = "free") + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16)) + scale_color_brewer(palette = 'Dark2') + scale_fill_brewer(palette = 'Dark2') + xlab("Count") + scale_x_continuous(name = "Size of ERS", breaks = c(1,63,127))
unique(localData$ruleLengths)
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins=3) + facet_wrap(vars(methodName), scales = "free") + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16)) + scale_color_brewer(palette = 'Dark2') + scale_fill_brewer(palette = 'Dark2') + ylab("Count") + scale_x_continuous(name = "Size of ERS") + xlim(1,127)
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths)) + facet_wrap(vars(methodName), scales = "free") + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16)) + scale_color_brewer(palette = 'Dark2') + scale_fill_brewer(palette = 'Dark2') + ylab("Count") + scale_x_continuous(name = "Size of ERS") + xlim(1,127)
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths)) + facet_wrap(vars(methodName), scales = "free") + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16)) + scale_color_brewer(palette = 'Dark2') + scale_fill_brewer(palette = 'Dark2') + ylab("Count") + scale_x_continuous(name = "Size of ERS") +                                     # Draw histogram
geom_vline(xintercept = median(ruleLengths),      # Add line for median
col = "red",
lwd = 3) +
annotate("text",                        # Add text for median
x = median(ruleLengths) * 1.7,
y = median(ruleLengths) * 1.7,
label = paste("Median =", median(ruleLengths)),
col = "red",
size = 8)
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths)) + facet_wrap(vars(methodName), scales = "free") + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16)) + scale_color_brewer(palette = 'Dark2') + scale_fill_brewer(palette = 'Dark2') + ylab("Count") + scale_x_continuous(name = "Size of ERS")
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths)) + facet_wrap(vars(methodName), scales = "free") + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16)) + scale_color_brewer(palette = 'Dark2') + scale_fill_brewer(palette = 'Dark2') + ylab("Count") + scale_x_continuous(name = "Size of ERS") + geom_vline(aes(xintercept=mean(ruleLengths)),
color="blue", linetype="dashed", size=1)
library(plyr)
mu <- ddply(localData[localData$indegree>=3,], "ruleLengths", summarise, grp.mean=mean(weight))
library(plyr)
mu <- ddply(localData[localData$indegree>=3,], "ruleLengths", summarise, grp.mean=mean(ruleLengths))
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths)) + facet_wrap(vars(methodName), scales = "free") + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16)) + scale_color_brewer(palette = 'Dark2') + scale_fill_brewer(palette = 'Dark2') + ylab("Count") + scale_x_continuous(name = "Size of ERS") + geom_vline(data = mu, aes(xintercept=mean(grp.mean)),
color="blue", linetype="dashed", size=1)
grp.mean
mu
library(plyr)
mu <- ddply(localData[localData$indegree>=3,], "methodName", summarise, grp.mean=mean(ruleLengths))
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths)) + facet_wrap(vars(methodName), scales = "free") + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16)) + scale_color_brewer(palette = 'Dark2') + scale_fill_brewer(palette = 'Dark2') + ylab("Count") + scale_x_continuous(name = "Size of ERS") + geom_vline(data = mu, aes(xintercept=mean(grp.mean)),
color="blue", linetype="dashed", size=1)
mu
library(plyr)
mu <- ddply(localData[localData$indegree>=3,], "methodName", summarise, grp.mean=mean(ruleLengths))
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths)) + facet_wrap(vars(methodName), scales = "free") + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16)) + scale_color_brewer(palette = 'Dark2') + scale_fill_brewer(palette = 'Dark2') + ylab("Count") + scale_x_continuous(name = "Size of ERS") + geom_vline(data = mu, aes(xintercept=mean(grp.mean), color = methodName),
color="blue", linetype="dashed", size=1)
library(plyr)
mu <- ddply(localData[localData$indegree>=3,], "methodName", summarise, grp.mean=mean(ruleLengths))
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths)) + facet_wrap(vars(methodName), scales = "free") + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16)) + scale_color_brewer(palette = 'Dark2') + scale_fill_brewer(palette = 'Dark2') + ylab("Count") + scale_x_continuous(name = "Size of ERS") + geom_vline(data = mu, aes(xintercept=mean(grp.mean), color = methodName),linetype="dashed", size=1)
library(plyr)
mu <- ddply(localData[localData$indegree>=3,], "methodName", summarise, grp.mean=mean(ruleLengths))
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths)) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16)) + scale_color_brewer(palette = 'Dark2') + scale_fill_brewer(palette = 'Dark2') + ylab("Count") + scale_x_continuous(name = "Size of ERS") + geom_vline(data = mu, aes(xintercept=mean(grp.mean), color = methodName),linetype="dashed", size=1)+ facet_wrap(vars(methodName), scales = "free")
mu
mean(mu$grp.mean)
ggplot(data = localData[localData$indegree>=3,]) + geom_boxplot(aes(ruleLengths))
ggplot(data = localData[localData$indegree>=3,]) + geom_boxplot(aes(x = ruleLengths, y = methodName))
ggplot(data = localData[localData$indegree>=3,]) + geom_violin(aes(x = ruleLengths, y = methodName))
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths))
ggplot(data = localData[localData$indegree>=3,]) + geom_boxplot(aes(ruleLengths))
ggplot(data = localData[localData$indegree>=3,]) + geom_boxplot(aes(x=ruleLengths,y=methodName))
mu <- ddply(localData[localData$indegree>=3,], "methodName", summarise, grp.mean=mean(ruleLengths))
mu
?aggregate
aggregate(localData$ruleLengths, by = localData$methodName, FUN=mean)
aggregate(localData$ruleLengths, by = list( localData$methodName), FUN=mean)
aggregate(localData[localData$indegree>=3,'ruleLengths'], by = list( localData[localData$indegree>=3,'methodName']), FUN=mean)
library(plyr)
mu <- ddply(localData[localData$indegree>=3,], "methodName", summarise, grp.mean=mean(ruleLengths))
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 127) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16)) + scale_color_brewer(palette = 'Dark2') + scale_fill_brewer(palette = 'Dark2') + ylab("Count") + scale_x_continuous(name = "Size of ERS") + geom_vline(data = mu, aes(xintercept=mean(grp.mean), color = methodName),linetype="dashed", size=1)+ facet_wrap(vars(methodName), scales = "free")
dataLine <- iris %>%
group_by(Species) %>%
summarize(mean_x = mean(Sepal.Length))
require(tidyverse)
data("iris")
dataLine <- iris %>%
group_by(Species) %>%
summarize(mean_x = mean(Sepal.Length))
require(tidyverse)
dataLine <- iris %>%
group_by(Species) %>%
summarize(mean_x = mean(Sepal.Length))
mu
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 127) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16)) + scale_color_brewer(palette = 'Dark2') + scale_fill_brewer(palette = 'Dark2') + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), scales = "free") + geom_vline(data=filter(localData[localData$indegree>=3,], methodName=="concatenated"), aes(xintercept=mu$grp.mean[mu$methodName == 'concatenated']))
filter(localData[localData$indegree>=3,], methodName="concatenated")
filter(localData[localData$indegree>=3,], methodName=="concatenated")
filter(localData[localData$indegree>=3,], 'methodName'=="concatenated")
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 127) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16)) + scale_color_brewer(palette = 'Dark2') + scale_fill_brewer(palette = 'Dark2') + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), scales = "free") + geom_vline(data=filter(localData[localData$indegree>=3,], 'methodName'=="concatenated"), aes(xintercept=mu$grp.mean[mu$methodName == 'concatenated']))
filter(localData[localData$indegree>=3,], 'methodName'=="concatenated")
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 127) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16)) + scale_color_brewer(palette = 'Dark2') + scale_fill_brewer(palette = 'Dark2') + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), scales = "free")
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 5) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16)) + scale_color_brewer(palette = 'Dark2') + scale_fill_brewer(palette = 'Dark2') + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), scales = "free")
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 10) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16)) + scale_color_brewer(palette = 'Dark2') + scale_fill_brewer(palette = 'Dark2') + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), scales = "free")
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 20) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16)) + scale_color_brewer(palette = 'Dark2') + scale_fill_brewer(palette = 'Dark2') + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), scales = "free")
?geom_vline
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 20) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16)) + scale_color_brewer(palette = 'Dark2') + scale_fill_brewer(palette = 'Dark2') + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), scales = "free") + geom_vline(data = mu, aes(xintercept=grp.mean)) + facet_wrap(vars(methodName))
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 20) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16)) + scale_color_brewer(palette = 'Dark2') + scale_fill_brewer(palette = 'Dark2') + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), scales = "free") + geom_vline(data = mu, aes(xintercept=grp.mean, color = methodName)) + facet_wrap(vars(methodName))
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 20) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16)) + scale_color_brewer(palette = 'Dark2') + scale_fill_brewer(palette = 'Dark2') + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), scales = "free") + geom_vline(data = mu, aes(xintercept=grp.mean, color = methodName), legend=FALSE) + facet_wrap(vars(methodName))
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 20) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16)) + scale_color_brewer(palette = 'Dark2') + scale_fill_brewer(palette = 'Dark2') + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), scales = "free") + geom_vline(data = mu, aes(xintercept=grp.mean, color = methodName), show.legend=FALSE) + facet_wrap(vars(methodName))
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 20) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16)) + scale_color_brewer(palette = 'Dark2') + scale_fill_brewer(palette = 'Dark2') + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), scales = "free") + geom_vline(data = mu, aes(xintercept=grp.mean)) + facet_wrap(vars(methodName)) + geom_text(data = mu, aes(label=grp.mean))+ facet_wrap(vars(methodName))
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 20) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16))  + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), scales = "free") + geom_vline(data = mu, aes(xintercept=grp.mean)) + facet_wrap(vars(methodName)) + geom_text(data = mu, aes(label=grp.mean)) + facet_wrap(vars(methodName))
+ geom_text(data = mu, aes(label=grp.mean)) + facet_wrap(vars(methodName))
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 20) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16))  + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), scales = "free") + geom_vline(data = mu, aes(xintercept=grp.mean)) + facet_wrap(vars(methodName))
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 20) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16))  + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), scales = "free") + geom_vline(data = mu, aes(xintercept=grp.mean)) + facet_wrap(vars(methodName)) + geom_text(data = mu, aes(label=grp.mean))
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 20) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16))  + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), scales = "free") + geom_vline(data = mu, aes(xintercept=grp.mean, label=grp.mean)) + facet_wrap(vars(methodName))
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 20) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16))  + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), scales = "free") + geom_vline(data = mu, aes(xintercept=grp.mean)) + geom_label(data = mu, aes(label=grp.mean))+ facet_wrap(vars(methodName), scales = "free")
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 20) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16))  + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), scales = "free") + geom_vline(data = mu, aes(xintercept=grp.mean)) + geom_label(data = mu, aes(label = methodName))+ facet_wrap(vars(methodName), scales = "free")
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 20) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16))  + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), scales = "free") + geom_vline(data = mu, aes(xintercept=grp.mean)) + geom_label(data = mu, aes(label = 'methodName'))+ facet_wrap(vars(methodName), scales = "free")
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 20) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16))  + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), scales = "free") + geom_vline(data = mu, aes(xintercept=grp.mean)) + geom_label(data = mu, aes(label = str(methodName)))+ facet_wrap(vars(methodName), scales = "free")
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 20) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16))  + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), scales = "free") + geom_vline(data = mu, aes(xintercept=grp.mean)) + geom_text(data = mu, aes(label = grp.mean))+ facet_wrap(vars(methodName), scales = "free")
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 20) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16))  + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), scales = "free") + geom_vline(data = mu, aes(xintercept=grp.mean)) + facet_wrap(vars(methodName), scales = "free")
kable(mu)
knitr::kable(mu)
levels(localData$methodName)
require(plyr)
levels(localData$methodName) = c("Combined", "Phosphoproteomics", "Proteomics", "Transcriptomics")
mu <- ddply(localData[localData$indegree>=3,], "methodName", summarise, grp.mean=mean(ruleLengths))
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 20) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16))  + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), nrow=1) + geom_vline(data = mu, aes(xintercept=grp.mean)) + facet_wrap(vars(methodName), nrow=1) #, scales = "free"
ggsave(filename = "ERS_size_distribution.png", height = 4, width = 8, dpi = 600)
ggsave(filename = "ERS_size_distribution.svg", height = 4, width = 8)
ggsave(filename = "ERS_size_distribution.pdf", height = 4, width = 8)
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 20) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16))  + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), nrow=1) + geom_vline(data = mu, aes(xintercept=grp.mean), color='red',linetype='dashed') + facet_wrap(vars(methodName), nrow=1) #, scales = "free"
ggsave(filename = "ERS_size_distribution.png", height = 4, width = 8, dpi = 600)
ggsave(filename = "ERS_size_distribution.svg", height = 4, width = 8)
ggsave(filename = "ERS_size_distribution.pdf", height = 4, width = 8)
require(plyr)
levels(localData$methodName) = c("Combined", "Phosphoproteomics", "Proteomics", "Transcriptomics")
mu <- ddply(localData[localData$indegree>=3,], "methodName", summarise, grp.mean=mean(ruleLengths))
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 20) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16))  + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), nrow=1, scales="free_y") + geom_vline(data = mu, aes(xintercept=grp.mean), color='red',linetype='dashed') + facet_wrap(vars(methodName), nrow=1, scales="free_y") #, scales = "free"
ggsave(filename = "ERS_size_distribution.png", height = 4, width = 8, dpi = 600)
ggsave(filename = "ERS_size_distribution.svg", height = 4, width = 8)
ggsave(filename = "ERS_size_distribution.pdf", height = 4, width = 8)
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 20) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 15))  + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), nrow=1, scales="free_y") + geom_vline(data = mu, aes(xintercept=grp.mean), color='red',linetype='dashed') + facet_wrap(vars(methodName), nrow=1, scales="free_y") #, scales = "free"
ggsave(filename = "ERS_size_distribution.png", height = 4, width = 8, dpi = 600)
ggsave(filename = "ERS_size_distribution.svg", height = 4, width = 8)
ggsave(filename = "ERS_size_distribution.pdf", height = 4, width = 8)
require(plyr)
levels(localData$methodName) = c("Combined", "Phosphoproteomics", "Proteomics", "Transcriptomics")
mu <- ddply(localData[localData$indegree>=3,], "methodName", summarise, grp.mean=mean(ruleLengths))
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 20) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 14))  + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), nrow=1, scales="free_y") + geom_vline(data = mu, aes(xintercept=grp.mean), color='red',linetype='dashed') + facet_wrap(vars(methodName), nrow=1, scales="free_y") #, scales = "free"
ggsave(filename = "ERS_size_distribution.png", height = 4, width = 8, dpi = 600)
ggsave(filename = "ERS_size_distribution.svg", height = 4, width = 8)
ggsave(filename = "ERS_size_distribution.pdf", height = 4, width = 8)
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 20) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 14))  + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), nrow=1, scales="free_y") + geom_vline(data = mu, aes(xintercept=grp.mean), color='red',linetype='dashed') + facet_wrap(vars(methodName), nrow=1, scales="free_y") + annotate("temp") #, scales = "free"
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 20) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 14))  + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), nrow=1, scales="free_y") + geom_vline(data = mu, aes(xintercept=grp.mean), color='red',linetype='dashed') + facet_wrap(vars(methodName), nrow=1, scales="free_y") + annotate("text", label = 'temp') #, scales = "free"
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 20) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 14))  + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), nrow=1, scales="free_y") + geom_vline(data = mu, aes(xintercept=grp.mean), color='red',linetype='dashed') + facet_wrap(vars(methodName), nrow=1, scales="free_y") + annotate("text", label = 'temp', x = 2:5, y = 5000) #, scales = "free"
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 20) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 14))  + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), nrow=1, scales="free_y") + geom_vline(data = mu, aes(xintercept=grp.mean), color='red',linetype='dashed') + facet_wrap(vars(methodName), nrow=1, scales="free_y") + annotate("text", label = 'temp', x = 2, y = 5000) #, scales = "free"
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 20) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 14))  + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), nrow=1, scales="free_y") + geom_vline(data = mu, aes(xintercept=grp.mean), color='red',linetype='dashed') + annotate("text", label = 'temp', x = 2, y = 5000)+ facet_wrap(vars(methodName), nrow=1, scales="free_y")  #, scales = "free"
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 20) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 14))  + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), nrow=1, scales="free_y") + geom_vline(data = mu, aes(xintercept=grp.mean), color='red',linetype='dashed') + geom_vline(data = mu, aes(label=grp.mean), color='red') + facet_wrap(vars(methodName), nrow=1, scales="free_y")
ggsave(filename = "ERS_size_distribution.png", height = 4, width = 8, dpi = 600)
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 20) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 14))  + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), nrow=1, scales="free_y") + geom_vline(data = mu, aes(xintercept=grp.mean), color='red',linetype='dashed') + geom_text(data = mu, aes(label=grp.mean), color='red') + facet_wrap(vars(methodName), nrow=1, scales="free_y")
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 20) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 14))  + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), nrow=1, scales="free_y") + geom_vline(data = mu, aes(xintercept=grp.mean), color='red',linetype='dashed') + geom_text(data = mu, aes(label=grp.mean)) + facet_wrap(vars(methodName), nrow=1, scales="free_y")
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 20) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 14))  + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), nrow=1, scales="free_y") + geom_vline(data = mu, aes(xintercept=grp.mean), color='red',linetype='dashed') + geom_text(data = mu, x=-Inf, y=-Inf, aes(label=grp.mean)) + facet_wrap(vars(methodName), nrow=1, scales="free_y")
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 20) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 14))  + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), nrow=1, scales="free_y") + geom_vline(data = mu, aes(xintercept=grp.mean), color='red',linetype='dashed') + geom_text(data = mu, x=Inf, y=Inf, aes(label=grp.mean)) + facet_wrap(vars(methodName), nrow=1, scales="free_y")
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 20) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 14))  + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), nrow=1, scales="free_y") + geom_vline(data = mu, aes(xintercept=grp.mean), color='red',linetype='dashed') + geom_text(data = mu, aes(x=grp.mean, label=grp.mean)) + facet_wrap(vars(methodName), nrow=1, scales="free_y")
require(plyr)
levels(localData$methodName) = c("Combined", "Phosphoproteomics", "Proteomics", "Transcriptomics")
mu <- ddply(localData[localData$indegree>=3,], "methodName", summarise, grp.mean=mean(ruleLengths))
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 20) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 14))  + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), nrow=1, scales="free_y") + geom_vline(data = mu, aes(xintercept=grp.mean), color='red',linetype='dashed') + geom_text(data = mu, y = Inf aes(x=grp.mean, label=grp.mean)) + facet_wrap(vars(methodName), nrow=1, scales="free_y")
require(plyr)
levels(localData$methodName) = c("Combined", "Phosphoproteomics", "Proteomics", "Transcriptomics")
mu <- ddply(localData[localData$indegree>=3,], "methodName", summarise, grp.mean=mean(ruleLengths))
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 20) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 14))  + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), nrow=1, scales="free_y") + geom_vline(data = mu, aes(xintercept=grp.mean), color='red',linetype='dashed') + geom_text(data = mu, y = Inf, aes(x=grp.mean, label=grp.mean)) + facet_wrap(vars(methodName), nrow=1, scales="free_y")
ggsave(filename = "ERS_size_distribution.png", height = 4, width = 8, dpi = 600)
ggsave(filename = "ERS_size_distribution.svg", height = 4, width = 8)
ggsave(filename = "ERS_size_distribution.pdf", height = 4, width = 8)
require(plyr)
levels(localData$methodName) = c("Combined", "Phosphoproteomics", "Proteomics", "Transcriptomics")
mu <- ddply(localData[localData$indegree>=3,], "methodName", summarise, grp.mean=mean(ruleLengths))
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 20) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 14))  + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), nrow=1, scales="free_y") + geom_vline(data = mu, aes(xintercept=grp.mean), color='red',linetype='dashed') + geom_text(data = mu, y = -Inf, aes(x=grp.mean, label=grp.mean)) + facet_wrap(vars(methodName), nrow=1, scales="free_y")
ggsave(filename = "ERS_size_distribution.png", height = 4, width = 8, dpi = 600)
ggsave(filename = "ERS_size_distribution.svg", height = 4, width = 8)
ggsave(filename = "ERS_size_distribution.pdf", height = 4, width = 8)
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 20) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 14))  + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), nrow=1, scales="free_y") + geom_vline(data = mu, aes(xintercept=grp.mean), color='red',linetype='dashed') + geom_text(data = mu, y = 1000, aes(x=grp.mean, label=grp.mean)) + facet_wrap(vars(methodName), nrow=1, scales="free_y")
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 20) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 14))  + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), nrow=1, scales="free_y") + geom_vline(data = mu, aes(xintercept=grp.mean), color='red',linetype='dashed') + geom_text(data = mu, y = 500, aes(x=grp.mean, label=grp.mean)) + facet_wrap(vars(methodName), nrow=1, scales="free_y")
mu
?geom_text
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 20) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 14))  + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), nrow=1, scales="free_y") + geom_vline(data = mu, aes(xintercept=grp.mean), color='red',linetype='dashed') + geom_text(data = mu, position = 'topright', aes(label=grp.mean)) + facet_wrap(vars(methodName), nrow=1, scales="free_y")
?position
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 20) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 14))  + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), nrow=1, scales="free_y") + geom_vline(data = mu, aes(xintercept=grp.mean), color='red',linetype='dashed') + geom_label(data = mu, position = 'topright', aes(label=grp.mean)) + facet_wrap(vars(methodName), nrow=1, scales="free_y")
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 20) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 14))  + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), nrow=1, scales="free_y") + geom_vline(data = mu, aes(xintercept=grp.mean), color='red',linetype='dashed') + geom_label(data = mu, y = Inf, aes(x = grp.mean,label=grp.mean)) + facet_wrap(vars(methodName), nrow=1, scales="free_y")
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 20) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 14))  + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), nrow=1, scales="free_y") + geom_vline(data = mu, aes(xintercept=grp.mean), color='red',linetype='dashed') + geom_label(data = mu, y = Inf-100, aes(x = grp.mean,label=grp.mean)) + facet_wrap(vars(methodName), nrow=1, scales="free_y")
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 20) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 14))  + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), nrow=1, scales="free_y") + geom_vline(data = mu, aes(xintercept=grp.mean), color='red',linetype='dashed') + geom_label(data = mu, y = Inf, x=Inf, vjust=1, hjust=1, aes(label=grp.mean)) + facet_wrap(vars(methodName), nrow=1, scales="free_y")
mu
mu$grp.mean = round(mu$grp.mean,1)
mu
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 20) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 14))  + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), nrow=1, scales="free_y") + geom_vline(data = mu, aes(xintercept=grp.mean), color='red',linetype='dashed') + geom_label(data = mu, y = Inf, x=Inf, vjust=1, hjust=1, aes(label=grp.mean)) + facet_wrap(vars(methodName), nrow=1, scales="free_y")
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 20) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 14))  + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), nrow=1, scales="free_y") + geom_vline(data = mu, aes(xintercept=grp.mean), color='red',linetype='dashed') + geom_label(data = mu, y = Inf, x=Inf, vjust=2, hjust=2, aes(label=grp.mean)) + facet_wrap(vars(methodName), nrow=1, scales="free_y")
ggsave(filename = "ERS_size_distribution.png", height = 4, width = 8, dpi = 600)
ggsave(filename = "ERS_size_distribution.svg", height = 4, width = 8)
ggsave(filename = "ERS_size_distribution.pdf", height = 4, width = 8)
require(plyr)
levels(localData$methodName) = c("Combined", "Phosphoproteomics", "Proteomics", "Transcriptomics")
mu <- ddply(localData[localData$indegree>=3,], "methodName", summarise, grp.mean=mean(ruleLengths))
mu$grp.mean = round(mu$grp.mean,1)
ggplot(data = localData[localData$indegree>=3,]) + geom_histogram(aes(ruleLengths), bins = 20) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 14))  + ylab("Count") + scale_x_continuous(name = "Size of ERS") + facet_wrap(vars(methodName), nrow=1, scales="free_y") + geom_vline(data = mu, aes(xintercept=grp.mean), color='red',linetype='dashed') + geom_label(data = mu, y = Inf, x=Inf, vjust=2, hjust=2, aes(label=grp.mean), color = 'red') + facet_wrap(vars(methodName), nrow=1, scales="free_y")
ggsave(filename = "ERS_size_distribution.png", height = 4, width = 8, dpi = 600)
ggsave(filename = "ERS_size_distribution.svg", height = 4, width = 8)
ggsave(filename = "ERS_size_distribution.pdf", height = 4, width = 8)
?FacetWrap
?facet_wrap
rm(localData)
nodeTable = read.csv("node_table.csv")
nodeTable = nodeTable[,2:ncol(nodeTable)]
print(colnames(nodeTable))
dim(nodeTable)
ggpairs(data=nodeTable)
?ggpairs
temp = reshape(nodeTable, varying = c('Display.Name', 'IS'), idvar = 'methodName')
temp = reshape(nodeTable, varying = c('Display.Name', 'IS'), idvar = 'methodName', direction = 'wide')
?dcast
temp = dcast(nodeTable, Display.Name + methodName ~ IS)
temp = dcast(nodeTable, 'Display.Name' + 'methodName' ~ 'IS')
head(temp)
head(nodeTable)
temp = dcast(nodeTable, 'Display.Name' + 'Dataset' ~ 'IS')
head(temp)
temp = dcast(nodeTable, 'Dataset' ~ 'Display.Name' , value.var = 'IS' )
head(temp)
temp = dcast(nodeTable, Dataset ~ Display.Name , value.var = 'IS' )
head(temp)
temp = dcast(nodeTable, Dataset ~ Display.Name , value.var = IS )
temp = dcast(nodeTable, Dataset ~ Display.Name , value.var = 'IS')
data<-dplyr::select(mtcars,mpg,disp,hp)
head(data)
ggpairs(data)+theme_bw()
colnames(nodeTable)[colnames(nodeTable)=='Dataset']
colnames(nodeTable)[!colnames(nodeTable)=='Dataset']
colnames(nodeTable)[!colnames(nodeTable)!='Dataset']
